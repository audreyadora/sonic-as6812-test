// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package msee

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type IPTypeT int64
const (
  IPTypeT_v4 IPTypeT = 4
  IPTypeT_v6 IPTypeT = 6
)

func (p IPTypeT) String() string {
  switch p {
  case IPTypeT_v4: return "v4"
  case IPTypeT_v6: return "v6"
  }
  return "<UNSET>"
}

func IPTypeTFromString(s string) (IPTypeT, error) {
  switch s {
  case "v4": return IPTypeT_v4, nil 
  case "v6": return IPTypeT_v6, nil 
  }
  return IPTypeT(0), fmt.Errorf("not a valid IPTypeT string")
}


func IPTypeTPtr(v IPTypeT) *IPTypeT { return &v }

func (p IPTypeT) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IPTypeT) UnmarshalText(text []byte) error {
q, err := IPTypeTFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IPTypeT) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IPTypeT(v)
return nil
}

func (p * IPTypeT) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResultT int64
const (
  ResultT_OK ResultT = 0
  ResultT_ERROR ResultT = 1
  ResultT_ADDED ResultT = 2
  ResultT_UPDATED ResultT = 3
  ResultT_REMOVED ResultT = 4
  ResultT_INVALID_PARAMETERS ResultT = 5
  ResultT_NO_MEMORY ResultT = 6
  ResultT_NOT_FOUND ResultT = 7
  ResultT_ALREADY_EXISTS ResultT = 8
)

func (p ResultT) String() string {
  switch p {
  case ResultT_OK: return "OK"
  case ResultT_ERROR: return "ERROR"
  case ResultT_ADDED: return "ADDED"
  case ResultT_UPDATED: return "UPDATED"
  case ResultT_REMOVED: return "REMOVED"
  case ResultT_INVALID_PARAMETERS: return "INVALID_PARAMETERS"
  case ResultT_NO_MEMORY: return "NO_MEMORY"
  case ResultT_NOT_FOUND: return "NOT_FOUND"
  case ResultT_ALREADY_EXISTS: return "ALREADY_EXISTS"
  }
  return "<UNSET>"
}

func ResultTFromString(s string) (ResultT, error) {
  switch s {
  case "OK": return ResultT_OK, nil 
  case "ERROR": return ResultT_ERROR, nil 
  case "ADDED": return ResultT_ADDED, nil 
  case "UPDATED": return ResultT_UPDATED, nil 
  case "REMOVED": return ResultT_REMOVED, nil 
  case "INVALID_PARAMETERS": return ResultT_INVALID_PARAMETERS, nil 
  case "NO_MEMORY": return ResultT_NO_MEMORY, nil 
  case "NOT_FOUND": return ResultT_NOT_FOUND, nil 
  case "ALREADY_EXISTS": return ResultT_ALREADY_EXISTS, nil 
  }
  return ResultT(0), fmt.Errorf("not a valid ResultT string")
}


func ResultTPtr(v ResultT) *ResultT { return &v }

func (p ResultT) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResultT) UnmarshalText(text []byte) error {
q, err := ResultTFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResultT) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResultT(v)
return nil
}

func (p * ResultT) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MseeIp4T int32

func MseeIp4TPtr(v MseeIp4T) *MseeIp4T { return &v }

type MseeMacT int64

func MseeMacTPtr(v MseeMacT) *MseeMacT { return &v }

type MseeVlanT int16

func MseeVlanTPtr(v MseeVlanT) *MseeVlanT { return &v }

type MseeObjectIDT int64

func MseeObjectIDTPtr(v MseeObjectIDT) *MseeObjectIDT { return &v }

type MseeVniT int32

func MseeVniTPtr(v MseeVniT) *MseeVniT { return &v }

type MseeVrfIDT int32

func MseeVrfIDTPtr(v MseeVrfIDT) *MseeVrfIDT { return &v }

type MseeUDPPortT int16

func MseeUDPPortTPtr(v MseeUDPPortT) *MseeUDPPortT { return &v }

type MseePortT int8

func MseePortTPtr(v MseePortT) *MseePortT { return &v }

type MseePrefixLenT int8

func MseePrefixLenTPtr(v MseePrefixLenT) *MseePrefixLenT { return &v }

type MseePortCountT int8

func MseePortCountTPtr(v MseePortCountT) *MseePortCountT { return &v }

type MseeGroupT string

func MseeGroupTPtr(v MseeGroupT) *MseeGroupT { return &v }

type MseeQueueIDT int8

func MseeQueueIDTPtr(v MseeQueueIDT) *MseeQueueIDT { return &v }

type MseeCounterName string

func MseeCounterNamePtr(v MseeCounterName) *MseeCounterName { return &v }

type MseeStatisticsName string

func MseeStatisticsNamePtr(v MseeStatisticsName) *MseeStatisticsName { return &v }

type CountersT map[MseeGroupT]map[MseeCounterName]int64

func CountersTPtr(v CountersT) *CountersT { return &v }

type StatisticsT map[MseeGroupT]map[MseeStatisticsName]int64

func StatisticsTPtr(v StatisticsT) *StatisticsT { return &v }

type HistT map[MseeQueueIDT]map[int8]float64

func HistTPtr(v HistT) *HistT { return &v }

// Attributes:
//  - Low
//  - High
type MseeIp6T struct {
  Low int64 `thrift:"low,1" db:"low" json:"low"`
  High int64 `thrift:"high,2" db:"high" json:"high"`
}

func NewMseeIp6T() *MseeIp6T {
  return &MseeIp6T{}
}


func (p *MseeIp6T) GetLow() int64 {
  return p.Low
}

func (p *MseeIp6T) GetHigh() int64 {
  return p.High
}
func (p *MseeIp6T) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MseeIp6T)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Low = v
}
  return nil
}

func (p *MseeIp6T)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.High = v
}
  return nil
}

func (p *MseeIp6T) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("msee_ip6_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MseeIp6T) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("low", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:low: ", p), err) }
  if err := oprot.WriteI64(int64(p.Low)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.low (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:low: ", p), err) }
  return err
}

func (p *MseeIp6T) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("high", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:high: ", p), err) }
  if err := oprot.WriteI64(int64(p.High)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.high (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:high: ", p), err) }
  return err
}

func (p *MseeIp6T) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MseeIp6T(%+v)", *p)
}

// Attributes:
//  - Ip4
//  - Ip6
type MseeIPT struct {
  Ip4 *MseeIp4T `thrift:"ip4,1" db:"ip4" json:"ip4,omitempty"`
  Ip6 *MseeIp6T `thrift:"ip6,2" db:"ip6" json:"ip6,omitempty"`
}

func NewMseeIPT() *MseeIPT {
  return &MseeIPT{}
}

var MseeIPT_Ip4_DEFAULT MseeIp4T
func (p *MseeIPT) GetIp4() MseeIp4T {
  if !p.IsSetIp4() {
    return MseeIPT_Ip4_DEFAULT
  }
return *p.Ip4
}
var MseeIPT_Ip6_DEFAULT *MseeIp6T
func (p *MseeIPT) GetIp6() *MseeIp6T {
  if !p.IsSetIp6() {
    return MseeIPT_Ip6_DEFAULT
  }
return p.Ip6
}
func (p *MseeIPT) CountSetFieldsMseeIPT() int {
  count := 0
  if (p.IsSetIp4()) {
    count++
  }
  if (p.IsSetIp6()) {
    count++
  }
  return count

}

func (p *MseeIPT) IsSetIp4() bool {
  return p.Ip4 != nil
}

func (p *MseeIPT) IsSetIp6() bool {
  return p.Ip6 != nil
}

func (p *MseeIPT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MseeIPT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeIp4T(v)
  p.Ip4 = &temp
}
  return nil
}

func (p *MseeIPT)  ReadField2(iprot thrift.TProtocol) error {
  p.Ip6 = &MseeIp6T{}
  if err := p.Ip6.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ip6), err)
  }
  return nil
}

func (p *MseeIPT) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsMseeIPT(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("msee_ip_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MseeIPT) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIp4() {
    if err := oprot.WriteFieldBegin("ip4", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip4: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Ip4)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ip4 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip4: ", p), err) }
  }
  return err
}

func (p *MseeIPT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIp6() {
    if err := oprot.WriteFieldBegin("ip6", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip6: ", p), err) }
    if err := p.Ip6.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ip6), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip6: ", p), err) }
  }
  return err
}

func (p *MseeIPT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MseeIPT(%+v)", *p)
}

// Attributes:
//  - IP
//  - Type
type MseeIPAddressT struct {
  IP *MseeIPT `thrift:"ip,1" db:"ip" json:"ip"`
  Type IPTypeT `thrift:"type,2" db:"type" json:"type"`
}

func NewMseeIPAddressT() *MseeIPAddressT {
  return &MseeIPAddressT{}
}

var MseeIPAddressT_IP_DEFAULT *MseeIPT
func (p *MseeIPAddressT) GetIP() *MseeIPT {
  if !p.IsSetIP() {
    return MseeIPAddressT_IP_DEFAULT
  }
return p.IP
}

func (p *MseeIPAddressT) GetType() IPTypeT {
  return p.Type
}
func (p *MseeIPAddressT) IsSetIP() bool {
  return p.IP != nil
}

func (p *MseeIPAddressT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MseeIPAddressT)  ReadField1(iprot thrift.TProtocol) error {
  p.IP = &MseeIPT{}
  if err := p.IP.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
  }
  return nil
}

func (p *MseeIPAddressT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IPTypeT(v)
  p.Type = temp
}
  return nil
}

func (p *MseeIPAddressT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("msee_ip_address_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MseeIPAddressT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := p.IP.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *MseeIPAddressT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *MseeIPAddressT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MseeIPAddressT(%+v)", *p)
}

// Attributes:
//  - IP
//  - MaskLength
type MseeIPPrefixT struct {
  IP *MseeIPAddressT `thrift:"ip,1" db:"ip" json:"ip"`
  MaskLength MseePrefixLenT `thrift:"mask_length,2" db:"mask_length" json:"mask_length"`
}

func NewMseeIPPrefixT() *MseeIPPrefixT {
  return &MseeIPPrefixT{}
}

var MseeIPPrefixT_IP_DEFAULT *MseeIPAddressT
func (p *MseeIPPrefixT) GetIP() *MseeIPAddressT {
  if !p.IsSetIP() {
    return MseeIPPrefixT_IP_DEFAULT
  }
return p.IP
}

func (p *MseeIPPrefixT) GetMaskLength() MseePrefixLenT {
  return p.MaskLength
}
func (p *MseeIPPrefixT) IsSetIP() bool {
  return p.IP != nil
}

func (p *MseeIPPrefixT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MseeIPPrefixT)  ReadField1(iprot thrift.TProtocol) error {
  p.IP = &MseeIPAddressT{}
  if err := p.IP.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
  }
  return nil
}

func (p *MseeIPPrefixT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MseePrefixLenT(v)
  p.MaskLength = temp
}
  return nil
}

func (p *MseeIPPrefixT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("msee_ip_prefix_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MseeIPPrefixT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := p.IP.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *MseeIPPrefixT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mask_length", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mask_length: ", p), err) }
  if err := oprot.WriteByte(int8(p.MaskLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mask_length (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mask_length: ", p), err) }
  return err
}

func (p *MseeIPPrefixT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MseeIPPrefixT(%+v)", *p)
}

type MSEE interface {
  // Parameters:
  //  - NbCustomerPorts
  //  - MacAddr
  //  - Ipv4Loaddr
  //  - Ipv6Loaddr
  InitDpdkPort(nb_customer_ports MseePortCountT, mac_addr MseeMacT, ipv4_loaddr MseeIp4T, ipv6_loaddr *MseeIp6T) (r ResultT, err error)
  // Parameters:
  //  - VrfID
  //  - Port
  //  - OuterVlan
  //  - InnerVlan
  AddPortToVrf(vrf_id MseeVrfIDT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error)
  // Parameters:
  //  - Port
  //  - OuterVlan
  //  - InnerVlan
  DeletePortFromVrf(port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error)
  // Parameters:
  //  - Vni
  //  - VrfID
  MapVniToVrf(vni MseeVniT, vrf_id MseeVrfIDT) (r ResultT, err error)
  // Parameters:
  //  - Vni
  UnmapVniToVrf(vni MseeVniT) (r ResultT, err error)
  // Parameters:
  //  - VrfID
  //  - DstVMIPPrefix
  //  - DstHostIP
  //  - DstMacAddress
  //  - Vni
  //  - Port
  AddEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT, dst_host_ip *MseeIPAddressT, dst_mac_address MseeMacT, vni MseeVniT, port MseeUDPPortT) (r ResultT, err error)
  // Parameters:
  //  - VrfID
  //  - DstVMIPPrefix
  DeleteEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT) (r ResultT, err error)
  // Parameters:
  //  - VrfID
  //  - DstIPPrefix
  //  - Mac
  //  - Port
  //  - OuterVlan
  //  - InnerVlan
  AddDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT, mac MseeMacT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error)
  // Parameters:
  //  - VrfID
  //  - DstIPPrefix
  DeleteDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT) (r ResultT, err error)
  // Parameters:
  //  - Group
  GetCounters(group MseeGroupT) (r CountersT, err error)
  // Parameters:
  //  - Group
  GetStatistics(group MseeGroupT) (r StatisticsT, err error)
  GetHist() (r HistT, err error)
}

type MSEEClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewMSEEClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MSEEClient {
  return &MSEEClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewMSEEClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MSEEClient {
  return &MSEEClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - NbCustomerPorts
//  - MacAddr
//  - Ipv4Loaddr
//  - Ipv6Loaddr
func (p *MSEEClient) InitDpdkPort(nb_customer_ports MseePortCountT, mac_addr MseeMacT, ipv4_loaddr MseeIp4T, ipv6_loaddr *MseeIp6T) (r ResultT, err error) {
  if err = p.sendInitDpdkPort(nb_customer_ports, mac_addr, ipv4_loaddr, ipv6_loaddr); err != nil { return }
  return p.recvInitDpdkPort()
}

func (p *MSEEClient) sendInitDpdkPort(nb_customer_ports MseePortCountT, mac_addr MseeMacT, ipv4_loaddr MseeIp4T, ipv6_loaddr *MseeIp6T)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("init_dpdk_port", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEInitDpdkPortArgs{
  NbCustomerPorts : nb_customer_ports,
  MacAddr : mac_addr,
  Ipv4Loaddr : ipv4_loaddr,
  Ipv6Loaddr : ipv6_loaddr,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvInitDpdkPort() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "init_dpdk_port" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "init_dpdk_port failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "init_dpdk_port failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "init_dpdk_port failed: invalid message type")
    return
  }
  result := MSEEInitDpdkPortResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - VrfID
//  - Port
//  - OuterVlan
//  - InnerVlan
func (p *MSEEClient) AddPortToVrf(vrf_id MseeVrfIDT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error) {
  if err = p.sendAddPortToVrf(vrf_id, port, outer_vlan, inner_vlan); err != nil { return }
  return p.recvAddPortToVrf()
}

func (p *MSEEClient) sendAddPortToVrf(vrf_id MseeVrfIDT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add_port_to_vrf", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEAddPortToVrfArgs{
  VrfID : vrf_id,
  Port : port,
  OuterVlan : outer_vlan,
  InnerVlan : inner_vlan,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvAddPortToVrf() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add_port_to_vrf" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_port_to_vrf failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_port_to_vrf failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_port_to_vrf failed: invalid message type")
    return
  }
  result := MSEEAddPortToVrfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Port
//  - OuterVlan
//  - InnerVlan
func (p *MSEEClient) DeletePortFromVrf(port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error) {
  if err = p.sendDeletePortFromVrf(port, outer_vlan, inner_vlan); err != nil { return }
  return p.recvDeletePortFromVrf()
}

func (p *MSEEClient) sendDeletePortFromVrf(port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("delete_port_from_vrf", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEDeletePortFromVrfArgs{
  Port : port,
  OuterVlan : outer_vlan,
  InnerVlan : inner_vlan,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvDeletePortFromVrf() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "delete_port_from_vrf" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_port_from_vrf failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_port_from_vrf failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_port_from_vrf failed: invalid message type")
    return
  }
  result := MSEEDeletePortFromVrfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Vni
//  - VrfID
func (p *MSEEClient) MapVniToVrf(vni MseeVniT, vrf_id MseeVrfIDT) (r ResultT, err error) {
  if err = p.sendMapVniToVrf(vni, vrf_id); err != nil { return }
  return p.recvMapVniToVrf()
}

func (p *MSEEClient) sendMapVniToVrf(vni MseeVniT, vrf_id MseeVrfIDT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("map_vni_to_vrf", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEMapVniToVrfArgs{
  Vni : vni,
  VrfID : vrf_id,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvMapVniToVrf() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "map_vni_to_vrf" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "map_vni_to_vrf failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "map_vni_to_vrf failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "map_vni_to_vrf failed: invalid message type")
    return
  }
  result := MSEEMapVniToVrfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Vni
func (p *MSEEClient) UnmapVniToVrf(vni MseeVniT) (r ResultT, err error) {
  if err = p.sendUnmapVniToVrf(vni); err != nil { return }
  return p.recvUnmapVniToVrf()
}

func (p *MSEEClient) sendUnmapVniToVrf(vni MseeVniT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("unmap_vni_to_vrf", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEUnmapVniToVrfArgs{
  Vni : vni,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvUnmapVniToVrf() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "unmap_vni_to_vrf" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unmap_vni_to_vrf failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unmap_vni_to_vrf failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error9 error
    error9, err = error8.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error9
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unmap_vni_to_vrf failed: invalid message type")
    return
  }
  result := MSEEUnmapVniToVrfResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - VrfID
//  - DstVMIPPrefix
//  - DstHostIP
//  - DstMacAddress
//  - Vni
//  - Port
func (p *MSEEClient) AddEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT, dst_host_ip *MseeIPAddressT, dst_mac_address MseeMacT, vni MseeVniT, port MseeUDPPortT) (r ResultT, err error) {
  if err = p.sendAddEncapRoute(vrf_id, dst_vm_ip_prefix, dst_host_ip, dst_mac_address, vni, port); err != nil { return }
  return p.recvAddEncapRoute()
}

func (p *MSEEClient) sendAddEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT, dst_host_ip *MseeIPAddressT, dst_mac_address MseeMacT, vni MseeVniT, port MseeUDPPortT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add_encap_route", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEAddEncapRouteArgs{
  VrfID : vrf_id,
  DstVMIPPrefix : dst_vm_ip_prefix,
  DstHostIP : dst_host_ip,
  DstMacAddress : dst_mac_address,
  Vni : vni,
  Port : port,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvAddEncapRoute() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add_encap_route" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_encap_route failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_encap_route failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error11 error
    error11, err = error10.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error11
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_encap_route failed: invalid message type")
    return
  }
  result := MSEEAddEncapRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - VrfID
//  - DstVMIPPrefix
func (p *MSEEClient) DeleteEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT) (r ResultT, err error) {
  if err = p.sendDeleteEncapRoute(vrf_id, dst_vm_ip_prefix); err != nil { return }
  return p.recvDeleteEncapRoute()
}

func (p *MSEEClient) sendDeleteEncapRoute(vrf_id MseeVrfIDT, dst_vm_ip_prefix *MseeIPPrefixT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("delete_encap_route", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEDeleteEncapRouteArgs{
  VrfID : vrf_id,
  DstVMIPPrefix : dst_vm_ip_prefix,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvDeleteEncapRoute() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "delete_encap_route" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_encap_route failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_encap_route failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error13 error
    error13, err = error12.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error13
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_encap_route failed: invalid message type")
    return
  }
  result := MSEEDeleteEncapRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - VrfID
//  - DstIPPrefix
//  - Mac
//  - Port
//  - OuterVlan
//  - InnerVlan
func (p *MSEEClient) AddDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT, mac MseeMacT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT) (r ResultT, err error) {
  if err = p.sendAddDecapRoute(vrf_id, dst_ip_prefix, mac, port, outer_vlan, inner_vlan); err != nil { return }
  return p.recvAddDecapRoute()
}

func (p *MSEEClient) sendAddDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT, mac MseeMacT, port MseePortT, outer_vlan MseeVlanT, inner_vlan MseeVlanT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add_decap_route", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEAddDecapRouteArgs{
  VrfID : vrf_id,
  DstIPPrefix : dst_ip_prefix,
  Mac : mac,
  Port : port,
  OuterVlan : outer_vlan,
  InnerVlan : inner_vlan,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvAddDecapRoute() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add_decap_route" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_decap_route failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_decap_route failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error15 error
    error15, err = error14.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error15
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_decap_route failed: invalid message type")
    return
  }
  result := MSEEAddDecapRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - VrfID
//  - DstIPPrefix
func (p *MSEEClient) DeleteDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT) (r ResultT, err error) {
  if err = p.sendDeleteDecapRoute(vrf_id, dst_ip_prefix); err != nil { return }
  return p.recvDeleteDecapRoute()
}

func (p *MSEEClient) sendDeleteDecapRoute(vrf_id MseeVrfIDT, dst_ip_prefix *MseeIPPrefixT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("delete_decap_route", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEDeleteDecapRouteArgs{
  VrfID : vrf_id,
  DstIPPrefix : dst_ip_prefix,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvDeleteDecapRoute() (value ResultT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "delete_decap_route" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delete_decap_route failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_decap_route failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delete_decap_route failed: invalid message type")
    return
  }
  result := MSEEDeleteDecapRouteResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Group
func (p *MSEEClient) GetCounters(group MseeGroupT) (r CountersT, err error) {
  if err = p.sendGetCounters(group); err != nil { return }
  return p.recvGetCounters()
}

func (p *MSEEClient) sendGetCounters(group MseeGroupT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_counters", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEGetCountersArgs{
  Group : group,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvGetCounters() (value CountersT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_counters" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_counters failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_counters failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_counters failed: invalid message type")
    return
  }
  result := MSEEGetCountersResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Group
func (p *MSEEClient) GetStatistics(group MseeGroupT) (r StatisticsT, err error) {
  if err = p.sendGetStatistics(group); err != nil { return }
  return p.recvGetStatistics()
}

func (p *MSEEClient) sendGetStatistics(group MseeGroupT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_statistics", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEGetStatisticsArgs{
  Group : group,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvGetStatistics() (value StatisticsT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_statistics" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_statistics failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_statistics failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error21 error
    error21, err = error20.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error21
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_statistics failed: invalid message type")
    return
  }
  result := MSEEGetStatisticsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

func (p *MSEEClient) GetHist() (r HistT, err error) {
  if err = p.sendGetHist(); err != nil { return }
  return p.recvGetHist()
}

func (p *MSEEClient) sendGetHist()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get_hist", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := MSEEGetHistArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *MSEEClient) recvGetHist() (value HistT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get_hist" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_hist failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_hist failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error23 error
    error23, err = error22.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error23
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_hist failed: invalid message type")
    return
  }
  result := MSEEGetHistResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type MSEEProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MSEE
}

func (p *MSEEProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MSEEProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MSEEProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMSEEProcessor(handler MSEE) *MSEEProcessor {

  self24 := &MSEEProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["init_dpdk_port"] = &mSEEProcessorInitDpdkPort{handler:handler}
  self24.processorMap["add_port_to_vrf"] = &mSEEProcessorAddPortToVrf{handler:handler}
  self24.processorMap["delete_port_from_vrf"] = &mSEEProcessorDeletePortFromVrf{handler:handler}
  self24.processorMap["map_vni_to_vrf"] = &mSEEProcessorMapVniToVrf{handler:handler}
  self24.processorMap["unmap_vni_to_vrf"] = &mSEEProcessorUnmapVniToVrf{handler:handler}
  self24.processorMap["add_encap_route"] = &mSEEProcessorAddEncapRoute{handler:handler}
  self24.processorMap["delete_encap_route"] = &mSEEProcessorDeleteEncapRoute{handler:handler}
  self24.processorMap["add_decap_route"] = &mSEEProcessorAddDecapRoute{handler:handler}
  self24.processorMap["delete_decap_route"] = &mSEEProcessorDeleteDecapRoute{handler:handler}
  self24.processorMap["get_counters"] = &mSEEProcessorGetCounters{handler:handler}
  self24.processorMap["get_statistics"] = &mSEEProcessorGetStatistics{handler:handler}
  self24.processorMap["get_hist"] = &mSEEProcessorGetHist{handler:handler}
return self24
}

func (p *MSEEProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x25

}

type mSEEProcessorInitDpdkPort struct {
  handler MSEE
}

func (p *mSEEProcessorInitDpdkPort) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEInitDpdkPortArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("init_dpdk_port", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEInitDpdkPortResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.InitDpdkPort(args.NbCustomerPorts, args.MacAddr, args.Ipv4Loaddr, args.Ipv6Loaddr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init_dpdk_port: " + err2.Error())
    oprot.WriteMessageBegin("init_dpdk_port", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("init_dpdk_port", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorAddPortToVrf struct {
  handler MSEE
}

func (p *mSEEProcessorAddPortToVrf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEAddPortToVrfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_port_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEAddPortToVrfResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.AddPortToVrf(args.VrfID, args.Port, args.OuterVlan, args.InnerVlan); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_port_to_vrf: " + err2.Error())
    oprot.WriteMessageBegin("add_port_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_port_to_vrf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorDeletePortFromVrf struct {
  handler MSEE
}

func (p *mSEEProcessorDeletePortFromVrf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEDeletePortFromVrfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_port_from_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEDeletePortFromVrfResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.DeletePortFromVrf(args.Port, args.OuterVlan, args.InnerVlan); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_port_from_vrf: " + err2.Error())
    oprot.WriteMessageBegin("delete_port_from_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delete_port_from_vrf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorMapVniToVrf struct {
  handler MSEE
}

func (p *mSEEProcessorMapVniToVrf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEMapVniToVrfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("map_vni_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEMapVniToVrfResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.MapVniToVrf(args.Vni, args.VrfID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing map_vni_to_vrf: " + err2.Error())
    oprot.WriteMessageBegin("map_vni_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("map_vni_to_vrf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorUnmapVniToVrf struct {
  handler MSEE
}

func (p *mSEEProcessorUnmapVniToVrf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEUnmapVniToVrfArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unmap_vni_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEUnmapVniToVrfResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.UnmapVniToVrf(args.Vni); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unmap_vni_to_vrf: " + err2.Error())
    oprot.WriteMessageBegin("unmap_vni_to_vrf", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("unmap_vni_to_vrf", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorAddEncapRoute struct {
  handler MSEE
}

func (p *mSEEProcessorAddEncapRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEAddEncapRouteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_encap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEAddEncapRouteResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.AddEncapRoute(args.VrfID, args.DstVMIPPrefix, args.DstHostIP, args.DstMacAddress, args.Vni, args.Port); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_encap_route: " + err2.Error())
    oprot.WriteMessageBegin("add_encap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_encap_route", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorDeleteEncapRoute struct {
  handler MSEE
}

func (p *mSEEProcessorDeleteEncapRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEDeleteEncapRouteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_encap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEDeleteEncapRouteResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.DeleteEncapRoute(args.VrfID, args.DstVMIPPrefix); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_encap_route: " + err2.Error())
    oprot.WriteMessageBegin("delete_encap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delete_encap_route", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorAddDecapRoute struct {
  handler MSEE
}

func (p *mSEEProcessorAddDecapRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEAddDecapRouteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_decap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEAddDecapRouteResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.AddDecapRoute(args.VrfID, args.DstIPPrefix, args.Mac, args.Port, args.OuterVlan, args.InnerVlan); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_decap_route: " + err2.Error())
    oprot.WriteMessageBegin("add_decap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_decap_route", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorDeleteDecapRoute struct {
  handler MSEE
}

func (p *mSEEProcessorDeleteDecapRoute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEDeleteDecapRouteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("delete_decap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEDeleteDecapRouteResult{}
var retval ResultT
  var err2 error
  if retval, err2 = p.handler.DeleteDecapRoute(args.VrfID, args.DstIPPrefix); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_decap_route: " + err2.Error())
    oprot.WriteMessageBegin("delete_decap_route", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("delete_decap_route", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorGetCounters struct {
  handler MSEE
}

func (p *mSEEProcessorGetCounters) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEGetCountersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_counters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEGetCountersResult{}
var retval CountersT
  var err2 error
  if retval, err2 = p.handler.GetCounters(args.Group); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_counters: " + err2.Error())
    oprot.WriteMessageBegin("get_counters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_counters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorGetStatistics struct {
  handler MSEE
}

func (p *mSEEProcessorGetStatistics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEGetStatisticsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEGetStatisticsResult{}
var retval StatisticsT
  var err2 error
  if retval, err2 = p.handler.GetStatistics(args.Group); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_statistics: " + err2.Error())
    oprot.WriteMessageBegin("get_statistics", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_statistics", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type mSEEProcessorGetHist struct {
  handler MSEE
}

func (p *mSEEProcessorGetHist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MSEEGetHistArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get_hist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MSEEGetHistResult{}
var retval HistT
  var err2 error
  if retval, err2 = p.handler.GetHist(); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_hist: " + err2.Error())
    oprot.WriteMessageBegin("get_hist", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get_hist", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - NbCustomerPorts
//  - MacAddr
//  - Ipv4Loaddr
//  - Ipv6Loaddr
type MSEEInitDpdkPortArgs struct {
  NbCustomerPorts MseePortCountT `thrift:"nb_customer_ports,1" db:"nb_customer_ports" json:"nb_customer_ports"`
  MacAddr MseeMacT `thrift:"mac_addr,2" db:"mac_addr" json:"mac_addr"`
  Ipv4Loaddr MseeIp4T `thrift:"ipv4_loaddr,3" db:"ipv4_loaddr" json:"ipv4_loaddr"`
  Ipv6Loaddr *MseeIp6T `thrift:"ipv6_loaddr,4" db:"ipv6_loaddr" json:"ipv6_loaddr"`
}

func NewMSEEInitDpdkPortArgs() *MSEEInitDpdkPortArgs {
  return &MSEEInitDpdkPortArgs{}
}


func (p *MSEEInitDpdkPortArgs) GetNbCustomerPorts() MseePortCountT {
  return p.NbCustomerPorts
}

func (p *MSEEInitDpdkPortArgs) GetMacAddr() MseeMacT {
  return p.MacAddr
}

func (p *MSEEInitDpdkPortArgs) GetIpv4Loaddr() MseeIp4T {
  return p.Ipv4Loaddr
}
var MSEEInitDpdkPortArgs_Ipv6Loaddr_DEFAULT *MseeIp6T
func (p *MSEEInitDpdkPortArgs) GetIpv6Loaddr() *MseeIp6T {
  if !p.IsSetIpv6Loaddr() {
    return MSEEInitDpdkPortArgs_Ipv6Loaddr_DEFAULT
  }
return p.Ipv6Loaddr
}
func (p *MSEEInitDpdkPortArgs) IsSetIpv6Loaddr() bool {
  return p.Ipv6Loaddr != nil
}

func (p *MSEEInitDpdkPortArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEInitDpdkPortArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseePortCountT(v)
  p.NbCustomerPorts = temp
}
  return nil
}

func (p *MSEEInitDpdkPortArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MseeMacT(v)
  p.MacAddr = temp
}
  return nil
}

func (p *MSEEInitDpdkPortArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MseeIp4T(v)
  p.Ipv4Loaddr = temp
}
  return nil
}

func (p *MSEEInitDpdkPortArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Ipv6Loaddr = &MseeIp6T{}
  if err := p.Ipv6Loaddr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ipv6Loaddr), err)
  }
  return nil
}

func (p *MSEEInitDpdkPortArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("init_dpdk_port_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEInitDpdkPortArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nb_customer_ports", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nb_customer_ports: ", p), err) }
  if err := oprot.WriteByte(int8(p.NbCustomerPorts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nb_customer_ports (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nb_customer_ports: ", p), err) }
  return err
}

func (p *MSEEInitDpdkPortArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac_addr", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mac_addr: ", p), err) }
  if err := oprot.WriteI64(int64(p.MacAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac_addr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mac_addr: ", p), err) }
  return err
}

func (p *MSEEInitDpdkPortArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipv4_loaddr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ipv4_loaddr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Ipv4Loaddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ipv4_loaddr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ipv4_loaddr: ", p), err) }
  return err
}

func (p *MSEEInitDpdkPortArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ipv6_loaddr", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ipv6_loaddr: ", p), err) }
  if err := p.Ipv6Loaddr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ipv6Loaddr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ipv6_loaddr: ", p), err) }
  return err
}

func (p *MSEEInitDpdkPortArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEInitDpdkPortArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEInitDpdkPortResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEInitDpdkPortResult() *MSEEInitDpdkPortResult {
  return &MSEEInitDpdkPortResult{}
}

var MSEEInitDpdkPortResult_Success_DEFAULT ResultT
func (p *MSEEInitDpdkPortResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEInitDpdkPortResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEInitDpdkPortResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEInitDpdkPortResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEInitDpdkPortResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEInitDpdkPortResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("init_dpdk_port_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEInitDpdkPortResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEInitDpdkPortResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEInitDpdkPortResult(%+v)", *p)
}

// Attributes:
//  - VrfID
//  - Port
//  - OuterVlan
//  - InnerVlan
type MSEEAddPortToVrfArgs struct {
  VrfID MseeVrfIDT `thrift:"vrf_id,1" db:"vrf_id" json:"vrf_id"`
  Port MseePortT `thrift:"port,2" db:"port" json:"port"`
  OuterVlan MseeVlanT `thrift:"outer_vlan,3" db:"outer_vlan" json:"outer_vlan"`
  InnerVlan MseeVlanT `thrift:"inner_vlan,4" db:"inner_vlan" json:"inner_vlan"`
}

func NewMSEEAddPortToVrfArgs() *MSEEAddPortToVrfArgs {
  return &MSEEAddPortToVrfArgs{}
}


func (p *MSEEAddPortToVrfArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}

func (p *MSEEAddPortToVrfArgs) GetPort() MseePortT {
  return p.Port
}

func (p *MSEEAddPortToVrfArgs) GetOuterVlan() MseeVlanT {
  return p.OuterVlan
}

func (p *MSEEAddPortToVrfArgs) GetInnerVlan() MseeVlanT {
  return p.InnerVlan
}
func (p *MSEEAddPortToVrfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddPortToVrfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEAddPortToVrfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MseePortT(v)
  p.Port = temp
}
  return nil
}

func (p *MSEEAddPortToVrfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MseeVlanT(v)
  p.OuterVlan = temp
}
  return nil
}

func (p *MSEEAddPortToVrfArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := MseeVlanT(v)
  p.InnerVlan = temp
}
  return nil
}

func (p *MSEEAddPortToVrfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_port_to_vrf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddPortToVrfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_id: ", p), err) }
  return err
}

func (p *MSEEAddPortToVrfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteByte(int8(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *MSEEAddPortToVrfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_vlan", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outer_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.OuterVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outer_vlan (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outer_vlan: ", p), err) }
  return err
}

func (p *MSEEAddPortToVrfArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inner_vlan", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inner_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.InnerVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inner_vlan (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inner_vlan: ", p), err) }
  return err
}

func (p *MSEEAddPortToVrfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddPortToVrfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEAddPortToVrfResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEAddPortToVrfResult() *MSEEAddPortToVrfResult {
  return &MSEEAddPortToVrfResult{}
}

var MSEEAddPortToVrfResult_Success_DEFAULT ResultT
func (p *MSEEAddPortToVrfResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEAddPortToVrfResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEAddPortToVrfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEAddPortToVrfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddPortToVrfResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEAddPortToVrfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_port_to_vrf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddPortToVrfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEAddPortToVrfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddPortToVrfResult(%+v)", *p)
}

// Attributes:
//  - Port
//  - OuterVlan
//  - InnerVlan
type MSEEDeletePortFromVrfArgs struct {
  Port MseePortT `thrift:"port,1" db:"port" json:"port"`
  OuterVlan MseeVlanT `thrift:"outer_vlan,2" db:"outer_vlan" json:"outer_vlan"`
  InnerVlan MseeVlanT `thrift:"inner_vlan,3" db:"inner_vlan" json:"inner_vlan"`
}

func NewMSEEDeletePortFromVrfArgs() *MSEEDeletePortFromVrfArgs {
  return &MSEEDeletePortFromVrfArgs{}
}


func (p *MSEEDeletePortFromVrfArgs) GetPort() MseePortT {
  return p.Port
}

func (p *MSEEDeletePortFromVrfArgs) GetOuterVlan() MseeVlanT {
  return p.OuterVlan
}

func (p *MSEEDeletePortFromVrfArgs) GetInnerVlan() MseeVlanT {
  return p.InnerVlan
}
func (p *MSEEDeletePortFromVrfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeletePortFromVrfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseePortT(v)
  p.Port = temp
}
  return nil
}

func (p *MSEEDeletePortFromVrfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MseeVlanT(v)
  p.OuterVlan = temp
}
  return nil
}

func (p *MSEEDeletePortFromVrfArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MseeVlanT(v)
  p.InnerVlan = temp
}
  return nil
}

func (p *MSEEDeletePortFromVrfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_port_from_vrf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeletePortFromVrfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:port: ", p), err) }
  if err := oprot.WriteByte(int8(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:port: ", p), err) }
  return err
}

func (p *MSEEDeletePortFromVrfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_vlan", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outer_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.OuterVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outer_vlan (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outer_vlan: ", p), err) }
  return err
}

func (p *MSEEDeletePortFromVrfArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inner_vlan", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inner_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.InnerVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inner_vlan (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inner_vlan: ", p), err) }
  return err
}

func (p *MSEEDeletePortFromVrfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeletePortFromVrfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEDeletePortFromVrfResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEDeletePortFromVrfResult() *MSEEDeletePortFromVrfResult {
  return &MSEEDeletePortFromVrfResult{}
}

var MSEEDeletePortFromVrfResult_Success_DEFAULT ResultT
func (p *MSEEDeletePortFromVrfResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEDeletePortFromVrfResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEDeletePortFromVrfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEDeletePortFromVrfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeletePortFromVrfResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEDeletePortFromVrfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_port_from_vrf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeletePortFromVrfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEDeletePortFromVrfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeletePortFromVrfResult(%+v)", *p)
}

// Attributes:
//  - Vni
//  - VrfID
type MSEEMapVniToVrfArgs struct {
  Vni MseeVniT `thrift:"vni,1" db:"vni" json:"vni"`
  VrfID MseeVrfIDT `thrift:"vrf_id,2" db:"vrf_id" json:"vrf_id"`
}

func NewMSEEMapVniToVrfArgs() *MSEEMapVniToVrfArgs {
  return &MSEEMapVniToVrfArgs{}
}


func (p *MSEEMapVniToVrfArgs) GetVni() MseeVniT {
  return p.Vni
}

func (p *MSEEMapVniToVrfArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}
func (p *MSEEMapVniToVrfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEMapVniToVrfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVniT(v)
  p.Vni = temp
}
  return nil
}

func (p *MSEEMapVniToVrfArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEMapVniToVrfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("map_vni_to_vrf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEMapVniToVrfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vni", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vni: ", p), err) }
  if err := oprot.WriteI32(int32(p.Vni)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vni (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vni: ", p), err) }
  return err
}

func (p *MSEEMapVniToVrfArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vrf_id: ", p), err) }
  return err
}

func (p *MSEEMapVniToVrfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEMapVniToVrfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEMapVniToVrfResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEMapVniToVrfResult() *MSEEMapVniToVrfResult {
  return &MSEEMapVniToVrfResult{}
}

var MSEEMapVniToVrfResult_Success_DEFAULT ResultT
func (p *MSEEMapVniToVrfResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEMapVniToVrfResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEMapVniToVrfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEMapVniToVrfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEMapVniToVrfResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEMapVniToVrfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("map_vni_to_vrf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEMapVniToVrfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEMapVniToVrfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEMapVniToVrfResult(%+v)", *p)
}

// Attributes:
//  - Vni
type MSEEUnmapVniToVrfArgs struct {
  Vni MseeVniT `thrift:"vni,1" db:"vni" json:"vni"`
}

func NewMSEEUnmapVniToVrfArgs() *MSEEUnmapVniToVrfArgs {
  return &MSEEUnmapVniToVrfArgs{}
}


func (p *MSEEUnmapVniToVrfArgs) GetVni() MseeVniT {
  return p.Vni
}
func (p *MSEEUnmapVniToVrfArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEUnmapVniToVrfArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVniT(v)
  p.Vni = temp
}
  return nil
}

func (p *MSEEUnmapVniToVrfArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unmap_vni_to_vrf_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEUnmapVniToVrfArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vni", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vni: ", p), err) }
  if err := oprot.WriteI32(int32(p.Vni)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vni (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vni: ", p), err) }
  return err
}

func (p *MSEEUnmapVniToVrfArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEUnmapVniToVrfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEUnmapVniToVrfResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEUnmapVniToVrfResult() *MSEEUnmapVniToVrfResult {
  return &MSEEUnmapVniToVrfResult{}
}

var MSEEUnmapVniToVrfResult_Success_DEFAULT ResultT
func (p *MSEEUnmapVniToVrfResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEUnmapVniToVrfResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEUnmapVniToVrfResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEUnmapVniToVrfResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEUnmapVniToVrfResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEUnmapVniToVrfResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unmap_vni_to_vrf_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEUnmapVniToVrfResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEUnmapVniToVrfResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEUnmapVniToVrfResult(%+v)", *p)
}

// Attributes:
//  - VrfID
//  - DstVMIPPrefix
//  - DstHostIP
//  - DstMacAddress
//  - Vni
//  - Port
type MSEEAddEncapRouteArgs struct {
  VrfID MseeVrfIDT `thrift:"vrf_id,1" db:"vrf_id" json:"vrf_id"`
  DstVMIPPrefix *MseeIPPrefixT `thrift:"dst_vm_ip_prefix,2" db:"dst_vm_ip_prefix" json:"dst_vm_ip_prefix"`
  DstHostIP *MseeIPAddressT `thrift:"dst_host_ip,3" db:"dst_host_ip" json:"dst_host_ip"`
  DstMacAddress MseeMacT `thrift:"dst_mac_address,4" db:"dst_mac_address" json:"dst_mac_address"`
  Vni MseeVniT `thrift:"vni,5" db:"vni" json:"vni"`
  Port MseeUDPPortT `thrift:"port,6" db:"port" json:"port"`
}

func NewMSEEAddEncapRouteArgs() *MSEEAddEncapRouteArgs {
  return &MSEEAddEncapRouteArgs{}
}


func (p *MSEEAddEncapRouteArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}
var MSEEAddEncapRouteArgs_DstVMIPPrefix_DEFAULT *MseeIPPrefixT
func (p *MSEEAddEncapRouteArgs) GetDstVMIPPrefix() *MseeIPPrefixT {
  if !p.IsSetDstVMIPPrefix() {
    return MSEEAddEncapRouteArgs_DstVMIPPrefix_DEFAULT
  }
return p.DstVMIPPrefix
}
var MSEEAddEncapRouteArgs_DstHostIP_DEFAULT *MseeIPAddressT
func (p *MSEEAddEncapRouteArgs) GetDstHostIP() *MseeIPAddressT {
  if !p.IsSetDstHostIP() {
    return MSEEAddEncapRouteArgs_DstHostIP_DEFAULT
  }
return p.DstHostIP
}

func (p *MSEEAddEncapRouteArgs) GetDstMacAddress() MseeMacT {
  return p.DstMacAddress
}

func (p *MSEEAddEncapRouteArgs) GetVni() MseeVniT {
  return p.Vni
}

func (p *MSEEAddEncapRouteArgs) GetPort() MseeUDPPortT {
  return p.Port
}
func (p *MSEEAddEncapRouteArgs) IsSetDstVMIPPrefix() bool {
  return p.DstVMIPPrefix != nil
}

func (p *MSEEAddEncapRouteArgs) IsSetDstHostIP() bool {
  return p.DstHostIP != nil
}

func (p *MSEEAddEncapRouteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DstVMIPPrefix = &MseeIPPrefixT{}
  if err := p.DstVMIPPrefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DstVMIPPrefix), err)
  }
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.DstHostIP = &MseeIPAddressT{}
  if err := p.DstHostIP.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DstHostIP), err)
  }
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := MseeMacT(v)
  p.DstMacAddress = temp
}
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := MseeVniT(v)
  p.Vni = temp
}
  return nil
}

func (p *MSEEAddEncapRouteArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := MseeUDPPortT(v)
  p.Port = temp
}
  return nil
}

func (p *MSEEAddEncapRouteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_encap_route_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddEncapRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_id: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_vm_ip_prefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_vm_ip_prefix: ", p), err) }
  if err := p.DstVMIPPrefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DstVMIPPrefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_vm_ip_prefix: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_host_ip", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dst_host_ip: ", p), err) }
  if err := p.DstHostIP.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DstHostIP), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dst_host_ip: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_mac_address", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dst_mac_address: ", p), err) }
  if err := oprot.WriteI64(int64(p.DstMacAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dst_mac_address (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dst_mac_address: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vni", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:vni: ", p), err) }
  if err := oprot.WriteI32(int32(p.Vni)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vni (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:vni: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:port: ", p), err) }
  if err := oprot.WriteI16(int16(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:port: ", p), err) }
  return err
}

func (p *MSEEAddEncapRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddEncapRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEAddEncapRouteResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEAddEncapRouteResult() *MSEEAddEncapRouteResult {
  return &MSEEAddEncapRouteResult{}
}

var MSEEAddEncapRouteResult_Success_DEFAULT ResultT
func (p *MSEEAddEncapRouteResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEAddEncapRouteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEAddEncapRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEAddEncapRouteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddEncapRouteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEAddEncapRouteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_encap_route_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddEncapRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEAddEncapRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddEncapRouteResult(%+v)", *p)
}

// Attributes:
//  - VrfID
//  - DstVMIPPrefix
type MSEEDeleteEncapRouteArgs struct {
  VrfID MseeVrfIDT `thrift:"vrf_id,1" db:"vrf_id" json:"vrf_id"`
  DstVMIPPrefix *MseeIPPrefixT `thrift:"dst_vm_ip_prefix,2" db:"dst_vm_ip_prefix" json:"dst_vm_ip_prefix"`
}

func NewMSEEDeleteEncapRouteArgs() *MSEEDeleteEncapRouteArgs {
  return &MSEEDeleteEncapRouteArgs{}
}


func (p *MSEEDeleteEncapRouteArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}
var MSEEDeleteEncapRouteArgs_DstVMIPPrefix_DEFAULT *MseeIPPrefixT
func (p *MSEEDeleteEncapRouteArgs) GetDstVMIPPrefix() *MseeIPPrefixT {
  if !p.IsSetDstVMIPPrefix() {
    return MSEEDeleteEncapRouteArgs_DstVMIPPrefix_DEFAULT
  }
return p.DstVMIPPrefix
}
func (p *MSEEDeleteEncapRouteArgs) IsSetDstVMIPPrefix() bool {
  return p.DstVMIPPrefix != nil
}

func (p *MSEEDeleteEncapRouteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeleteEncapRouteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEDeleteEncapRouteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DstVMIPPrefix = &MseeIPPrefixT{}
  if err := p.DstVMIPPrefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DstVMIPPrefix), err)
  }
  return nil
}

func (p *MSEEDeleteEncapRouteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_encap_route_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeleteEncapRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_id: ", p), err) }
  return err
}

func (p *MSEEDeleteEncapRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_vm_ip_prefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_vm_ip_prefix: ", p), err) }
  if err := p.DstVMIPPrefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DstVMIPPrefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_vm_ip_prefix: ", p), err) }
  return err
}

func (p *MSEEDeleteEncapRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeleteEncapRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEDeleteEncapRouteResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEDeleteEncapRouteResult() *MSEEDeleteEncapRouteResult {
  return &MSEEDeleteEncapRouteResult{}
}

var MSEEDeleteEncapRouteResult_Success_DEFAULT ResultT
func (p *MSEEDeleteEncapRouteResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEDeleteEncapRouteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEDeleteEncapRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEDeleteEncapRouteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeleteEncapRouteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEDeleteEncapRouteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_encap_route_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeleteEncapRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEDeleteEncapRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeleteEncapRouteResult(%+v)", *p)
}

// Attributes:
//  - VrfID
//  - DstIPPrefix
//  - Mac
//  - Port
//  - OuterVlan
//  - InnerVlan
type MSEEAddDecapRouteArgs struct {
  VrfID MseeVrfIDT `thrift:"vrf_id,1" db:"vrf_id" json:"vrf_id"`
  DstIPPrefix *MseeIPPrefixT `thrift:"dst_ip_prefix,2" db:"dst_ip_prefix" json:"dst_ip_prefix"`
  Mac MseeMacT `thrift:"mac,3" db:"mac" json:"mac"`
  Port MseePortT `thrift:"port,4" db:"port" json:"port"`
  OuterVlan MseeVlanT `thrift:"outer_vlan,5" db:"outer_vlan" json:"outer_vlan"`
  InnerVlan MseeVlanT `thrift:"inner_vlan,6" db:"inner_vlan" json:"inner_vlan"`
}

func NewMSEEAddDecapRouteArgs() *MSEEAddDecapRouteArgs {
  return &MSEEAddDecapRouteArgs{}
}


func (p *MSEEAddDecapRouteArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}
var MSEEAddDecapRouteArgs_DstIPPrefix_DEFAULT *MseeIPPrefixT
func (p *MSEEAddDecapRouteArgs) GetDstIPPrefix() *MseeIPPrefixT {
  if !p.IsSetDstIPPrefix() {
    return MSEEAddDecapRouteArgs_DstIPPrefix_DEFAULT
  }
return p.DstIPPrefix
}

func (p *MSEEAddDecapRouteArgs) GetMac() MseeMacT {
  return p.Mac
}

func (p *MSEEAddDecapRouteArgs) GetPort() MseePortT {
  return p.Port
}

func (p *MSEEAddDecapRouteArgs) GetOuterVlan() MseeVlanT {
  return p.OuterVlan
}

func (p *MSEEAddDecapRouteArgs) GetInnerVlan() MseeVlanT {
  return p.InnerVlan
}
func (p *MSEEAddDecapRouteArgs) IsSetDstIPPrefix() bool {
  return p.DstIPPrefix != nil
}

func (p *MSEEAddDecapRouteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DstIPPrefix = &MseeIPPrefixT{}
  if err := p.DstIPPrefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DstIPPrefix), err)
  }
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MseeMacT(v)
  p.Mac = temp
}
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := MseePortT(v)
  p.Port = temp
}
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := MseeVlanT(v)
  p.OuterVlan = temp
}
  return nil
}

func (p *MSEEAddDecapRouteArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := MseeVlanT(v)
  p.InnerVlan = temp
}
  return nil
}

func (p *MSEEAddDecapRouteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_decap_route_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddDecapRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_id: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_ip_prefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_ip_prefix: ", p), err) }
  if err := p.DstIPPrefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DstIPPrefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_ip_prefix: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mac: ", p), err) }
  if err := oprot.WriteI64(int64(p.Mac)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mac: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.BYTE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
  if err := oprot.WriteByte(int8(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outer_vlan", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outer_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.OuterVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outer_vlan (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outer_vlan: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inner_vlan", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:inner_vlan: ", p), err) }
  if err := oprot.WriteI16(int16(p.InnerVlan)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inner_vlan (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:inner_vlan: ", p), err) }
  return err
}

func (p *MSEEAddDecapRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddDecapRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEAddDecapRouteResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEAddDecapRouteResult() *MSEEAddDecapRouteResult {
  return &MSEEAddDecapRouteResult{}
}

var MSEEAddDecapRouteResult_Success_DEFAULT ResultT
func (p *MSEEAddDecapRouteResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEAddDecapRouteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEAddDecapRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEAddDecapRouteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEAddDecapRouteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEAddDecapRouteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_decap_route_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEAddDecapRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEAddDecapRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEAddDecapRouteResult(%+v)", *p)
}

// Attributes:
//  - VrfID
//  - DstIPPrefix
type MSEEDeleteDecapRouteArgs struct {
  VrfID MseeVrfIDT `thrift:"vrf_id,1" db:"vrf_id" json:"vrf_id"`
  DstIPPrefix *MseeIPPrefixT `thrift:"dst_ip_prefix,2" db:"dst_ip_prefix" json:"dst_ip_prefix"`
}

func NewMSEEDeleteDecapRouteArgs() *MSEEDeleteDecapRouteArgs {
  return &MSEEDeleteDecapRouteArgs{}
}


func (p *MSEEDeleteDecapRouteArgs) GetVrfID() MseeVrfIDT {
  return p.VrfID
}
var MSEEDeleteDecapRouteArgs_DstIPPrefix_DEFAULT *MseeIPPrefixT
func (p *MSEEDeleteDecapRouteArgs) GetDstIPPrefix() *MseeIPPrefixT {
  if !p.IsSetDstIPPrefix() {
    return MSEEDeleteDecapRouteArgs_DstIPPrefix_DEFAULT
  }
return p.DstIPPrefix
}
func (p *MSEEDeleteDecapRouteArgs) IsSetDstIPPrefix() bool {
  return p.DstIPPrefix != nil
}

func (p *MSEEDeleteDecapRouteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeleteDecapRouteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeVrfIDT(v)
  p.VrfID = temp
}
  return nil
}

func (p *MSEEDeleteDecapRouteArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DstIPPrefix = &MseeIPPrefixT{}
  if err := p.DstIPPrefix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DstIPPrefix), err)
  }
  return nil
}

func (p *MSEEDeleteDecapRouteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_decap_route_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeleteDecapRouteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vrf_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vrf_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.VrfID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vrf_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vrf_id: ", p), err) }
  return err
}

func (p *MSEEDeleteDecapRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dst_ip_prefix", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dst_ip_prefix: ", p), err) }
  if err := p.DstIPPrefix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DstIPPrefix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dst_ip_prefix: ", p), err) }
  return err
}

func (p *MSEEDeleteDecapRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeleteDecapRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEDeleteDecapRouteResult struct {
  Success *ResultT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEDeleteDecapRouteResult() *MSEEDeleteDecapRouteResult {
  return &MSEEDeleteDecapRouteResult{}
}

var MSEEDeleteDecapRouteResult_Success_DEFAULT ResultT
func (p *MSEEDeleteDecapRouteResult) GetSuccess() ResultT {
  if !p.IsSetSuccess() {
    return MSEEDeleteDecapRouteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MSEEDeleteDecapRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEDeleteDecapRouteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEDeleteDecapRouteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := ResultT(v)
  p.Success = &temp
}
  return nil
}

func (p *MSEEDeleteDecapRouteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("delete_decap_route_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEDeleteDecapRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEDeleteDecapRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEDeleteDecapRouteResult(%+v)", *p)
}

// Attributes:
//  - Group
type MSEEGetCountersArgs struct {
  Group MseeGroupT `thrift:"group,1" db:"group" json:"group"`
}

func NewMSEEGetCountersArgs() *MSEEGetCountersArgs {
  return &MSEEGetCountersArgs{}
}


func (p *MSEEGetCountersArgs) GetGroup() MseeGroupT {
  return p.Group
}
func (p *MSEEGetCountersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetCountersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeGroupT(v)
  p.Group = temp
}
  return nil
}

func (p *MSEEGetCountersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_counters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetCountersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err) }
  return err
}

func (p *MSEEGetCountersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetCountersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEGetCountersResult struct {
  Success CountersT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEGetCountersResult() *MSEEGetCountersResult {
  return &MSEEGetCountersResult{}
}

var MSEEGetCountersResult_Success_DEFAULT CountersT

func (p *MSEEGetCountersResult) GetSuccess() CountersT {
  return p.Success
}
func (p *MSEEGetCountersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEGetCountersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetCountersResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(CountersT, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key26 MseeGroupT
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := MseeGroupT(v)
    _key26 = temp
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[MseeCounterName]int64, size)
    _val27 :=  tMap
    for i := 0; i < size; i ++ {
var _key28 MseeCounterName
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := MseeCounterName(v)
      _key28 = temp
}
var _val29 int64
      if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val29 = v
}
      _val27[_key28] = _val29
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success[_key26] = _val27
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MSEEGetCountersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_counters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetCountersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI64(int64(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEGetCountersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetCountersResult(%+v)", *p)
}

// Attributes:
//  - Group
type MSEEGetStatisticsArgs struct {
  Group MseeGroupT `thrift:"group,1" db:"group" json:"group"`
}

func NewMSEEGetStatisticsArgs() *MSEEGetStatisticsArgs {
  return &MSEEGetStatisticsArgs{}
}


func (p *MSEEGetStatisticsArgs) GetGroup() MseeGroupT {
  return p.Group
}
func (p *MSEEGetStatisticsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetStatisticsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MseeGroupT(v)
  p.Group = temp
}
  return nil
}

func (p *MSEEGetStatisticsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_statistics_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetStatisticsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:group: ", p), err) }
  if err := oprot.WriteString(string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:group: ", p), err) }
  return err
}

func (p *MSEEGetStatisticsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetStatisticsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEGetStatisticsResult struct {
  Success StatisticsT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEGetStatisticsResult() *MSEEGetStatisticsResult {
  return &MSEEGetStatisticsResult{}
}

var MSEEGetStatisticsResult_Success_DEFAULT StatisticsT

func (p *MSEEGetStatisticsResult) GetSuccess() StatisticsT {
  return p.Success
}
func (p *MSEEGetStatisticsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEGetStatisticsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetStatisticsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(StatisticsT, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key30 MseeGroupT
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := MseeGroupT(v)
    _key30 = temp
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[MseeStatisticsName]int64, size)
    _val31 :=  tMap
    for i := 0; i < size; i ++ {
var _key32 MseeStatisticsName
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := MseeStatisticsName(v)
      _key32 = temp
}
var _val33 int64
      if v, err := iprot.ReadI64(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val33 = v
}
      _val31[_key32] = _val33
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MSEEGetStatisticsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_statistics_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetStatisticsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteString(string(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteI64(int64(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEGetStatisticsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetStatisticsResult(%+v)", *p)
}

type MSEEGetHistArgs struct {
}

func NewMSEEGetHistArgs() *MSEEGetHistArgs {
  return &MSEEGetHistArgs{}
}

func (p *MSEEGetHistArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetHistArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_hist_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetHistArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetHistArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MSEEGetHistResult struct {
  Success HistT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMSEEGetHistResult() *MSEEGetHistResult {
  return &MSEEGetHistResult{}
}

var MSEEGetHistResult_Success_DEFAULT HistT

func (p *MSEEGetHistResult) GetSuccess() HistT {
  return p.Success
}
func (p *MSEEGetHistResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MSEEGetHistResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MSEEGetHistResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(HistT, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key34 MseeQueueIDT
    if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := MseeQueueIDT(v)
    _key34 = temp
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[int8]float64, size)
    _val35 :=  tMap
    for i := 0; i < size; i ++ {
var _key36 int8
      if v, err := iprot.ReadByte(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      temp := int8(v)
      _key36 = temp
}
var _val37 float64
      if v, err := iprot.ReadDouble(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val37 = v
}
      _val35[_key36] = _val37
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Success[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MSEEGetHistResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_hist_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MSEEGetHistResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.BYTE, thrift.MAP, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteByte(int8(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteMapBegin(thrift.BYTE, thrift.DOUBLE, len(v)); err != nil {
        return thrift.PrependError("error writing map begin: ", err)
      }
      for k, v := range v {
        if err := oprot.WriteByte(int8(k)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
        if err := oprot.WriteDouble(float64(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return thrift.PrependError("error writing map end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MSEEGetHistResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MSEEGetHistResult(%+v)", *p)
}


