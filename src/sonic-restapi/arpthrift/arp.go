// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package arp

import (
    "bytes"
    "fmt"
    "git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type VlanTagT int16

func VlanTagTPtr(v VlanTagT) *VlanTagT { return &v }

type Ip4T int32

func Ip4TPtr(v Ip4T) *Ip4T { return &v }

type MacT []byte

func MacTPtr(v MacT) *MacT { return &v }

// Attributes:
//  - IfaceName
//  - Stag
//  - Ctag
type ReqTupleT struct {
  IfaceName string `thrift:"iface_name,1" db:"iface_name" json:"iface_name"`
  Stag VlanTagT `thrift:"stag,2" db:"stag" json:"stag"`
  Ctag VlanTagT `thrift:"ctag,3" db:"ctag" json:"ctag"`
}

func NewReqTupleT() *ReqTupleT {
  return &ReqTupleT{}
}


func (p *ReqTupleT) GetIfaceName() string {
  return p.IfaceName
}

func (p *ReqTupleT) GetStag() VlanTagT {
  return p.Stag
}

func (p *ReqTupleT) GetCtag() VlanTagT {
  return p.Ctag
}
func (p *ReqTupleT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqTupleT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfaceName = v
}
  return nil
}

func (p *ReqTupleT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VlanTagT(v)
  p.Stag = temp
}
  return nil
}

func (p *ReqTupleT)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := VlanTagT(v)
  p.Ctag = temp
}
  return nil
}

func (p *ReqTupleT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("req_tuple_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqTupleT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iface_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface_name: ", p), err) }
  if err := oprot.WriteString(string(p.IfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface_name: ", p), err) }
  return err
}

func (p *ReqTupleT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stag", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Stag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stag: ", p), err) }
  return err
}

func (p *ReqTupleT) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctag", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ctag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Ctag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ctag: ", p), err) }
  return err
}

func (p *ReqTupleT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqTupleT(%+v)", *p)
}

// Attributes:
//  - Tuples
//  - Index
//  - IP
type ReqTuplesT struct {
  Tuples []*ReqTupleT `thrift:"tuples,1" db:"tuples" json:"tuples"`
  Index int32 `thrift:"index,2" db:"index" json:"index"`
  IP Ip4T `thrift:"ip,3" db:"ip" json:"ip"`
}

func NewReqTuplesT() *ReqTuplesT {
  return &ReqTuplesT{}
}


func (p *ReqTuplesT) GetTuples() []*ReqTupleT {
  return p.Tuples
}

func (p *ReqTuplesT) GetIndex() int32 {
  return p.Index
}

func (p *ReqTuplesT) GetIP() Ip4T {
  return p.IP
}
func (p *ReqTuplesT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqTuplesT)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReqTupleT, 0, size)
  p.Tuples =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ReqTupleT{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Tuples = append(p.Tuples, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReqTuplesT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *ReqTuplesT)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ip4T(v)
  p.IP = temp
}
  return nil
}

func (p *ReqTuplesT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("req_tuples_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqTuplesT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tuples", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tuples: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tuples)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Tuples {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tuples: ", p), err) }
  return err
}

func (p *ReqTuplesT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *ReqTuplesT) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
  if err := oprot.WriteI32(int32(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  return err
}

func (p *ReqTuplesT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqTuplesT(%+v)", *p)
}

// Attributes:
//  - Request
//  - Index
//  - Mac
//  - IsFound
type RepTupleT struct {
  Request *ReqTupleT `thrift:"request,1" db:"request" json:"request"`
  Index int32 `thrift:"index,2" db:"index" json:"index"`
  Mac MacT `thrift:"mac,3" db:"mac" json:"mac"`
  IsFound bool `thrift:"is_found,4" db:"is_found" json:"is_found"`
}

func NewRepTupleT() *RepTupleT {
  return &RepTupleT{}
}

var RepTupleT_Request_DEFAULT *ReqTupleT
func (p *RepTupleT) GetRequest() *ReqTupleT {
  if !p.IsSetRequest() {
    return RepTupleT_Request_DEFAULT
  }
return p.Request
}

func (p *RepTupleT) GetIndex() int32 {
  return p.Index
}

func (p *RepTupleT) GetMac() MacT {
  return p.Mac
}

func (p *RepTupleT) GetIsFound() bool {
  return p.IsFound
}
func (p *RepTupleT) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RepTupleT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RepTupleT)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReqTupleT{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RepTupleT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *RepTupleT)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MacT(v)
  p.Mac = temp
}
  return nil
}

func (p *RepTupleT)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsFound = v
}
  return nil
}

func (p *RepTupleT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rep_tuple_t"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RepTupleT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RepTupleT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI32(int32(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *RepTupleT) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mac", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mac: ", p), err) }
  if err := oprot.WriteBinary(p.Mac); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mac (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mac: ", p), err) }
  return err
}

func (p *RepTupleT) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("is_found", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:is_found: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsFound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_found (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:is_found: ", p), err) }
  return err
}

func (p *RepTupleT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RepTupleT(%+v)", *p)
}

type ArpResponder interface {
  // Parameters:
  //  - IfaceName
  AddInterface(iface_name string) (r bool, err error)
  // Parameters:
  //  - IfaceName
  DelInterface(iface_name string) (r bool, err error)
  // Parameters:
  //  - IfaceName
  //  - Stag
  //  - Ctag
  //  - IP
  AddIP(iface_name string, stag VlanTagT, ctag VlanTagT, ip Ip4T) (r bool, err error)
  // Parameters:
  //  - IfaceName
  //  - Stag
  //  - Ctag
  DelIP(iface_name string, stag VlanTagT, ctag VlanTagT) (r bool, err error)
  // Parameters:
  //  - Requests
  RequestMac(requests []*ReqTuplesT) (r []*RepTupleT, err error)
}

type ArpResponderClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewArpResponderClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ArpResponderClient {
  return &ArpResponderClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewArpResponderClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ArpResponderClient {
  return &ArpResponderClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - IfaceName
func (p *ArpResponderClient) AddInterface(iface_name string) (r bool, err error) {
  if err = p.sendAddInterface(iface_name); err != nil { return }
  return p.recvAddInterface()
}

func (p *ArpResponderClient) sendAddInterface(iface_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add_interface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ArpResponderAddInterfaceArgs{
  IfaceName : iface_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ArpResponderClient) recvAddInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add_interface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_interface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_interface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_interface failed: invalid message type")
    return
  }
  result := ArpResponderAddInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - IfaceName
func (p *ArpResponderClient) DelInterface(iface_name string) (r bool, err error) {
  if err = p.sendDelInterface(iface_name); err != nil { return }
  return p.recvDelInterface()
}

func (p *ArpResponderClient) sendDelInterface(iface_name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("del_interface", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ArpResponderDelInterfaceArgs{
  IfaceName : iface_name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ArpResponderClient) recvDelInterface() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "del_interface" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "del_interface failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "del_interface failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error4 error
    error4, err = error3.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error4
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "del_interface failed: invalid message type")
    return
  }
  result := ArpResponderDelInterfaceResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - IfaceName
//  - Stag
//  - Ctag
//  - IP
func (p *ArpResponderClient) AddIP(iface_name string, stag VlanTagT, ctag VlanTagT, ip Ip4T) (r bool, err error) {
  if err = p.sendAddIP(iface_name, stag, ctag, ip); err != nil { return }
  return p.recvAddIP()
}

func (p *ArpResponderClient) sendAddIP(iface_name string, stag VlanTagT, ctag VlanTagT, ip Ip4T)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("add_ip", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ArpResponderAddIPArgs{
  IfaceName : iface_name,
  Stag : stag,
  Ctag : ctag,
  IP : ip,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ArpResponderClient) recvAddIP() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "add_ip" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "add_ip failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "add_ip failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error6 error
    error6, err = error5.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error6
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "add_ip failed: invalid message type")
    return
  }
  result := ArpResponderAddIPResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - IfaceName
//  - Stag
//  - Ctag
func (p *ArpResponderClient) DelIP(iface_name string, stag VlanTagT, ctag VlanTagT) (r bool, err error) {
  if err = p.sendDelIP(iface_name, stag, ctag); err != nil { return }
  return p.recvDelIP()
}

func (p *ArpResponderClient) sendDelIP(iface_name string, stag VlanTagT, ctag VlanTagT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("del_ip", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ArpResponderDelIPArgs{
  IfaceName : iface_name,
  Stag : stag,
  Ctag : ctag,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ArpResponderClient) recvDelIP() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "del_ip" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "del_ip failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "del_ip failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error8 error
    error8, err = error7.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error8
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "del_ip failed: invalid message type")
    return
  }
  result := ArpResponderDelIPResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Requests
func (p *ArpResponderClient) RequestMac(requests []*ReqTuplesT) (r []*RepTupleT, err error) {
  if err = p.sendRequestMac(requests); err != nil { return }
  return p.recvRequestMac()
}

func (p *ArpResponderClient) sendRequestMac(requests []*ReqTuplesT)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("request_mac", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := ArpResponderRequestMacArgs{
  Requests : requests,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *ArpResponderClient) recvRequestMac() (value []*RepTupleT, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "request_mac" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "request_mac failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "request_mac failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error9 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error10 error
    error10, err = error9.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error10
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "request_mac failed: invalid message type")
    return
  }
  result := ArpResponderRequestMacResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type ArpResponderProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ArpResponder
}

func (p *ArpResponderProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ArpResponderProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ArpResponderProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewArpResponderProcessor(handler ArpResponder) *ArpResponderProcessor {

  self11 := &ArpResponderProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self11.processorMap["add_interface"] = &arpResponderProcessorAddInterface{handler:handler}
  self11.processorMap["del_interface"] = &arpResponderProcessorDelInterface{handler:handler}
  self11.processorMap["add_ip"] = &arpResponderProcessorAddIP{handler:handler}
  self11.processorMap["del_ip"] = &arpResponderProcessorDelIP{handler:handler}
  self11.processorMap["request_mac"] = &arpResponderProcessorRequestMac{handler:handler}
return self11
}

func (p *ArpResponderProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x12 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x12.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x12

}

type arpResponderProcessorAddInterface struct {
  handler ArpResponder
}

func (p *arpResponderProcessorAddInterface) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ArpResponderAddInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_interface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ArpResponderAddInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddInterface(args.IfaceName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_interface: " + err2.Error())
    oprot.WriteMessageBegin("add_interface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_interface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type arpResponderProcessorDelInterface struct {
  handler ArpResponder
}

func (p *arpResponderProcessorDelInterface) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ArpResponderDelInterfaceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("del_interface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ArpResponderDelInterfaceResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DelInterface(args.IfaceName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing del_interface: " + err2.Error())
    oprot.WriteMessageBegin("del_interface", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("del_interface", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type arpResponderProcessorAddIP struct {
  handler ArpResponder
}

func (p *arpResponderProcessorAddIP) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ArpResponderAddIPArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("add_ip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ArpResponderAddIPResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AddIP(args.IfaceName, args.Stag, args.Ctag, args.IP); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add_ip: " + err2.Error())
    oprot.WriteMessageBegin("add_ip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("add_ip", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type arpResponderProcessorDelIP struct {
  handler ArpResponder
}

func (p *arpResponderProcessorDelIP) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ArpResponderDelIPArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("del_ip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ArpResponderDelIPResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.DelIP(args.IfaceName, args.Stag, args.Ctag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing del_ip: " + err2.Error())
    oprot.WriteMessageBegin("del_ip", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("del_ip", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type arpResponderProcessorRequestMac struct {
  handler ArpResponder
}

func (p *arpResponderProcessorRequestMac) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ArpResponderRequestMacArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("request_mac", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ArpResponderRequestMacResult{}
var retval []*RepTupleT
  var err2 error
  if retval, err2 = p.handler.RequestMac(args.Requests); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing request_mac: " + err2.Error())
    oprot.WriteMessageBegin("request_mac", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("request_mac", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - IfaceName
type ArpResponderAddInterfaceArgs struct {
  IfaceName string `thrift:"iface_name,1" db:"iface_name" json:"iface_name"`
}

func NewArpResponderAddInterfaceArgs() *ArpResponderAddInterfaceArgs {
  return &ArpResponderAddInterfaceArgs{}
}


func (p *ArpResponderAddInterfaceArgs) GetIfaceName() string {
  return p.IfaceName
}
func (p *ArpResponderAddInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderAddInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfaceName = v
}
  return nil
}

func (p *ArpResponderAddInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_interface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderAddInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iface_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface_name: ", p), err) }
  if err := oprot.WriteString(string(p.IfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface_name: ", p), err) }
  return err
}

func (p *ArpResponderAddInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderAddInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArpResponderAddInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArpResponderAddInterfaceResult() *ArpResponderAddInterfaceResult {
  return &ArpResponderAddInterfaceResult{}
}

var ArpResponderAddInterfaceResult_Success_DEFAULT bool
func (p *ArpResponderAddInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ArpResponderAddInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ArpResponderAddInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ArpResponderAddInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderAddInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ArpResponderAddInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_interface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderAddInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ArpResponderAddInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderAddInterfaceResult(%+v)", *p)
}

// Attributes:
//  - IfaceName
type ArpResponderDelInterfaceArgs struct {
  IfaceName string `thrift:"iface_name,1" db:"iface_name" json:"iface_name"`
}

func NewArpResponderDelInterfaceArgs() *ArpResponderDelInterfaceArgs {
  return &ArpResponderDelInterfaceArgs{}
}


func (p *ArpResponderDelInterfaceArgs) GetIfaceName() string {
  return p.IfaceName
}
func (p *ArpResponderDelInterfaceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderDelInterfaceArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfaceName = v
}
  return nil
}

func (p *ArpResponderDelInterfaceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_interface_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderDelInterfaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iface_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface_name: ", p), err) }
  if err := oprot.WriteString(string(p.IfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface_name: ", p), err) }
  return err
}

func (p *ArpResponderDelInterfaceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderDelInterfaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArpResponderDelInterfaceResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArpResponderDelInterfaceResult() *ArpResponderDelInterfaceResult {
  return &ArpResponderDelInterfaceResult{}
}

var ArpResponderDelInterfaceResult_Success_DEFAULT bool
func (p *ArpResponderDelInterfaceResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ArpResponderDelInterfaceResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ArpResponderDelInterfaceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ArpResponderDelInterfaceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderDelInterfaceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ArpResponderDelInterfaceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_interface_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderDelInterfaceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ArpResponderDelInterfaceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderDelInterfaceResult(%+v)", *p)
}

// Attributes:
//  - IfaceName
//  - Stag
//  - Ctag
//  - IP
type ArpResponderAddIPArgs struct {
  IfaceName string `thrift:"iface_name,1" db:"iface_name" json:"iface_name"`
  Stag VlanTagT `thrift:"stag,2" db:"stag" json:"stag"`
  Ctag VlanTagT `thrift:"ctag,3" db:"ctag" json:"ctag"`
  IP Ip4T `thrift:"ip,4" db:"ip" json:"ip"`
}

func NewArpResponderAddIPArgs() *ArpResponderAddIPArgs {
  return &ArpResponderAddIPArgs{}
}


func (p *ArpResponderAddIPArgs) GetIfaceName() string {
  return p.IfaceName
}

func (p *ArpResponderAddIPArgs) GetStag() VlanTagT {
  return p.Stag
}

func (p *ArpResponderAddIPArgs) GetCtag() VlanTagT {
  return p.Ctag
}

func (p *ArpResponderAddIPArgs) GetIP() Ip4T {
  return p.IP
}
func (p *ArpResponderAddIPArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderAddIPArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfaceName = v
}
  return nil
}

func (p *ArpResponderAddIPArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VlanTagT(v)
  p.Stag = temp
}
  return nil
}

func (p *ArpResponderAddIPArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := VlanTagT(v)
  p.Ctag = temp
}
  return nil
}

func (p *ArpResponderAddIPArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Ip4T(v)
  p.IP = temp
}
  return nil
}

func (p *ArpResponderAddIPArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_ip_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderAddIPArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iface_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface_name: ", p), err) }
  if err := oprot.WriteString(string(p.IfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface_name: ", p), err) }
  return err
}

func (p *ArpResponderAddIPArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stag", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Stag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stag: ", p), err) }
  return err
}

func (p *ArpResponderAddIPArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctag", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ctag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Ctag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ctag: ", p), err) }
  return err
}

func (p *ArpResponderAddIPArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err) }
  if err := oprot.WriteI32(int32(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err) }
  return err
}

func (p *ArpResponderAddIPArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderAddIPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArpResponderAddIPResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArpResponderAddIPResult() *ArpResponderAddIPResult {
  return &ArpResponderAddIPResult{}
}

var ArpResponderAddIPResult_Success_DEFAULT bool
func (p *ArpResponderAddIPResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ArpResponderAddIPResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ArpResponderAddIPResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ArpResponderAddIPResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderAddIPResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ArpResponderAddIPResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("add_ip_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderAddIPResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ArpResponderAddIPResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderAddIPResult(%+v)", *p)
}

// Attributes:
//  - IfaceName
//  - Stag
//  - Ctag
type ArpResponderDelIPArgs struct {
  IfaceName string `thrift:"iface_name,1" db:"iface_name" json:"iface_name"`
  Stag VlanTagT `thrift:"stag,2" db:"stag" json:"stag"`
  Ctag VlanTagT `thrift:"ctag,3" db:"ctag" json:"ctag"`
}

func NewArpResponderDelIPArgs() *ArpResponderDelIPArgs {
  return &ArpResponderDelIPArgs{}
}


func (p *ArpResponderDelIPArgs) GetIfaceName() string {
  return p.IfaceName
}

func (p *ArpResponderDelIPArgs) GetStag() VlanTagT {
  return p.Stag
}

func (p *ArpResponderDelIPArgs) GetCtag() VlanTagT {
  return p.Ctag
}
func (p *ArpResponderDelIPArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderDelIPArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IfaceName = v
}
  return nil
}

func (p *ArpResponderDelIPArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VlanTagT(v)
  p.Stag = temp
}
  return nil
}

func (p *ArpResponderDelIPArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := VlanTagT(v)
  p.Ctag = temp
}
  return nil
}

func (p *ArpResponderDelIPArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_ip_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderDelIPArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iface_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iface_name: ", p), err) }
  if err := oprot.WriteString(string(p.IfaceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iface_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iface_name: ", p), err) }
  return err
}

func (p *ArpResponderDelIPArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stag", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Stag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stag: ", p), err) }
  return err
}

func (p *ArpResponderDelIPArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ctag", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ctag: ", p), err) }
  if err := oprot.WriteI16(int16(p.Ctag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ctag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ctag: ", p), err) }
  return err
}

func (p *ArpResponderDelIPArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderDelIPArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArpResponderDelIPResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArpResponderDelIPResult() *ArpResponderDelIPResult {
  return &ArpResponderDelIPResult{}
}

var ArpResponderDelIPResult_Success_DEFAULT bool
func (p *ArpResponderDelIPResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ArpResponderDelIPResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ArpResponderDelIPResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ArpResponderDelIPResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderDelIPResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ArpResponderDelIPResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("del_ip_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderDelIPResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ArpResponderDelIPResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderDelIPResult(%+v)", *p)
}

// Attributes:
//  - Requests
type ArpResponderRequestMacArgs struct {
  Requests []*ReqTuplesT `thrift:"requests,1" db:"requests" json:"requests"`
}

func NewArpResponderRequestMacArgs() *ArpResponderRequestMacArgs {
  return &ArpResponderRequestMacArgs{}
}


func (p *ArpResponderRequestMacArgs) GetRequests() []*ReqTuplesT {
  return p.Requests
}
func (p *ArpResponderRequestMacArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderRequestMacArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ReqTuplesT, 0, size)
  p.Requests =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &ReqTuplesT{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Requests = append(p.Requests, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ArpResponderRequestMacArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("request_mac_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderRequestMacArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requests", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requests: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Requests)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Requests {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requests: ", p), err) }
  return err
}

func (p *ArpResponderRequestMacArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderRequestMacArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArpResponderRequestMacResult struct {
  Success []*RepTupleT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArpResponderRequestMacResult() *ArpResponderRequestMacResult {
  return &ArpResponderRequestMacResult{}
}

var ArpResponderRequestMacResult_Success_DEFAULT []*RepTupleT

func (p *ArpResponderRequestMacResult) GetSuccess() []*RepTupleT {
  return p.Success
}
func (p *ArpResponderRequestMacResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ArpResponderRequestMacResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ArpResponderRequestMacResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RepTupleT, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &RepTupleT{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ArpResponderRequestMacResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("request_mac_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ArpResponderRequestMacResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ArpResponderRequestMacResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ArpResponderRequestMacResult(%+v)", *p)
}


