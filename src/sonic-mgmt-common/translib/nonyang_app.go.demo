////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or //
//  its subsidiaries.                                                         //
//                                                                            //
//  Licensed under the Apache License, Version 2.0 (the "License");           //
//  you may not use this file except in compliance with the License.          //
//  You may obtain a copy of the License at                                   //
//                                                                            //
//     http://www.apache.org/licenses/LICENSE-2.0                             //
//                                                                            //
//  Unless required by applicable law or agreed to in writing, software       //
//  distributed under the License is distributed on an "AS IS" BASIS,         //
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  //
//  See the License for the specific language governing permissions and       //
//  limitations under the License.                                            //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

package translib

import (
	"encoding/json"
	"fmt"
	"reflect"
	"github.com/Azure/sonic-mgmt-common/translib/db"
	"github.com/Azure/sonic-mgmt-common/translib/tlerr"

	log "github.com/golang/glog"
)

// nonYangDemoApp holds all invocation and state information for
// the non-yang demo app
type nonYangDemoApp struct {
	// request information
	path    *PathInfo
	reqData []byte

	// DB client to operate on config_db
	confDB *db.DB

	// Cahce for read operation
	respJSON interface{}
}

type jsonObject map[string]interface{}
type jsonArray []interface{}

var (
	vlanTable   = &db.TableSpec{Name: "VLAN"}
	memberTable = &db.TableSpec{Name: "VLAN_MEMBER"}
)

func init() {
	register(
		"/nonyang/",
		&appInfo{appType: reflect.TypeOf(nonYangDemoApp{}),
			tablesToWatch: []*db.TableSpec{vlanTable, memberTable},
			isNative:      true})
}

// initialize function prepares this nonYangDemoApp instance
// for a new request handling.
func (app *nonYangDemoApp) initialize(data appData) {
	app.path = NewPathInfo(data.path)
	app.reqData = data.payload
}

func (app *nonYangDemoApp) translateCreate(d *db.DB) ([]db.WatchKeys, error) {
	app.confDB = d
	return nil, nil
}

func (app *nonYangDemoApp) translateUpdate(d *db.DB) ([]db.WatchKeys, error) {
	return nil, tlerr.NotSupported("Unsuppoted operation")
}

func (app *nonYangDemoApp) translateReplace(d *db.DB) ([]db.WatchKeys, error) {
	return nil, tlerr.NotSupported("Unsuppoted operation")
}

func (app *nonYangDemoApp) translateDelete(d *db.DB) ([]db.WatchKeys, error) {
	app.confDB = d
	return nil, nil
}

func (app *nonYangDemoApp) translateGet(dbs [db.MaxDB]*db.DB) error {
	return nil
}

func (app *nonYangDemoApp) translateSubscribe(dbs [db.MaxDB]*db.DB, path string) (*notificationOpts, *notificationInfo, error) {
	err := tlerr.NotSupported("Unsuppoted operation")
	return nil, nil, err
}

func (app *nonYangDemoApp) processCreate(d *db.DB) (SetResponse, error) {
	var resp SetResponse
	pathInfo := app.path
	var err error

	log.Infof("Received CREATE for path %s; vars=%v", pathInfo.Template, pathInfo.Vars)

	switch pathInfo.Template {
	case "/nonyang/vlan":
		err = app.doCreateVlans()

	case "/nonyang/vlan/{}/member":
		err = app.doCreateVlanMembers()

	default:
		err = tlerr.NotSupported("Unknown path")
	}

	return resp, err
}

func (app *nonYangDemoApp) processUpdate(d *db.DB) (SetResponse, error) {
	var resp SetResponse
	return resp, tlerr.NotSupported("Unsuppoted operation")
}

func (app *nonYangDemoApp) processReplace(d *db.DB) (SetResponse, error) {
	var resp SetResponse
	return resp, tlerr.NotSupported("Unsuppoted operation")
}

func (app *nonYangDemoApp) processDelete(d *db.DB) (SetResponse, error) {
	var resp SetResponse
	pathInfo := app.path
	var err error

	log.Infof("Received DELETE for path %s; vars=%v", pathInfo.Template, pathInfo.Vars)

	switch pathInfo.Template {
	case "/nonyang/vlan/{}":
		err = app.doDeleteVlan()

	case "/nonyang/vlan/{}/member/{}":
		err = app.doDeleteVlanMember()

	default:
		err = tlerr.NotSupported("Unknown path")
	}

	return resp, err
}

func (app *nonYangDemoApp) processGet(dbs [db.MaxDB]*db.DB) (GetResponse, error) {
	app.confDB = dbs[db.ConfigDB]
	pathInfo := app.path
	var err error

	log.Infof("Received GET for path %s; vars=%v", pathInfo.Template, pathInfo.Vars)

	switch pathInfo.Template {
	case "/nonyang/vlan":
		err = app.doGetAllVlans()

	case "/nonyang/vlan/{}":
		err = app.doGetVlanByID()

	default:
		err = tlerr.NotSupported("Unknown path")
	}

	var respData []byte
	if err == nil && app.respJSON != nil {
		respData, err = json.Marshal(app.respJSON)
	}

	return GetResponse{Payload: respData}, err
}

// doGetAllVlans is the handler for "/nonyang/vlan" path
// Loads all vlans and member data from db and prepares
// a json array - each item being one vlan info.
func (app *nonYangDemoApp) doGetAllVlans() error {
	log.Infof("in GetAllVlans")

	// Get all vlans from db
	t, err := app.confDB.GetTable(vlanTable)
	if err != nil {
		return err
	}

	var allVlansJSON jsonArray

	keys, _ := t.GetKeys()
	log.Infof("Found %d VLAN table keys", len(keys))
	for _, key := range keys {
		log.Infof("Processing %v", key.Get(0))

		vlanInfo, _ := t.GetEntry(key)
		vlanJSON, err := app.getVlanJSON(&vlanInfo)
		if err != nil {
			return err
		}

		allVlansJSON = append(allVlansJSON, *vlanJSON)
	}

	app.respJSON = &allVlansJSON
	return nil
}

// doGetVlanByID is the handler for "/nonyang/vlan/{id}" path.
// Loads data for one vlan and its members and prepares a json
// object.
func (app *nonYangDemoApp) doGetVlanByID() error {
	vlanID, _ := app.path.IntVar("id")
	log.Infof("in GetVlanByID(), vid=%d", vlanID)

	vlanEntry, err := app.getVlanEntry(vlanID)
	if err == nil {
		app.respJSON, err = app.getVlanJSON(&vlanEntry)
	}

	return err
}

// getVlanJSON prepares a raw json object for given VLAN table
// entry. Member information are fetched from VLAN_MEMBER table.
func (app *nonYangDemoApp) getVlanJSON(vlanEntry *db.Value) (*jsonObject, error) {
	vlanJSON := make(jsonObject)
	var memberListJSON jsonArray

	vlanID, _ := vlanEntry.GetInt("vlanid")
	vlanName := toVlanName(vlanID)

	log.Infof("Preparing json for vlan %d", vlanID)

	memberPorts := vlanEntry.GetList("members")
	log.Infof("%s members = %v", vlanName, memberPorts)

	for _, portName := range memberPorts {
		memberJSON := make(jsonObject)
		memberJSON["port"] = portName

		memberEntry, err := app.confDB.GetEntry(memberTable, asKey(vlanName, portName))
		if isNotFoundError(err) {
			log.Infof("Failed to load VLAN_MEMBER %s,%s; err=%v", vlanName, portName, err)
		} else if err != nil {
			return nil, err
		} else {
			memberJSON["mode"] = memberEntry.Get("tagging_mode")
		}

		memberListJSON = append(memberListJSON, memberJSON)
	}

	vlanJSON["id"] = vlanID
	vlanJSON["name"] = vlanName
	vlanJSON["members"] = memberListJSON

	return &vlanJSON, nil
}

// doCreateVlans handles CREATE operation on "/nonyang/vlan" path.
func (app *nonYangDemoApp) doCreateVlans() error {
	log.Infof("in doCreateVlans()")

	// vlan creation expects array of vlan ids.
	var vlansJSON []int
	err := json.Unmarshal(app.reqData, &vlansJSON)
	if err != nil {
		log.Errorf("Failed to parse input.. err=%v", err)
		return tlerr.InvalidArgs("Invalid input")
	}

	log.Infof("Receieved %d vlan ids; %v", len(vlansJSON), vlansJSON)

	for _, vid := range vlansJSON {
		vlanName := toVlanName(vid)
		log.Infof("NEW vlan entry '%s'", vlanName)

		entry := db.Value{Field: make(map[string]string)}
		entry.SetInt("vlanid", vid)
		err = app.confDB.CreateEntry(vlanTable, asKey(vlanName), entry)
		if err != nil {
			return err
		}
	}

	return nil
}

// doCreateVlanMembers handles CREATE operation on path
// "/nonyang/vlan/{}/member"
func (app *nonYangDemoApp) doCreateVlanMembers() error {
	vlanID, _ := app.path.IntVar("id")
	log.Infof("in doCreateVlanMembers(), vid=%d", vlanID)

	var memberListJSON []map[string]string
	err := json.Unmarshal(app.reqData, &memberListJSON)
	if err != nil {
		log.Errorf("Failed to parse input.. err=%v", err)
		return tlerr.InvalidArgs("Invalid input")
	}

	vlanName := toVlanName(vlanID)
	vlanEntry, err := app.getVlanEntry(vlanID)
	if err != nil {
		return err
	}

	membersList := vlanEntry.GetList("members")

	for _, memberJSON := range memberListJSON {
		log.Infof("Processing member info %v", memberJSON)

		portName, _ := memberJSON["port"]
		membersList = append(membersList, portName)

		taggingMode, ok := memberJSON["mode"]
		if !ok {
			taggingMode = "tagged"
		}

		log.Infof("NEW vlan_member entry '%s|%s'; mode=%s", vlanName, portName, taggingMode)
		memberEntry := db.Value{Field: make(map[string]string)}
		memberEntry.Set("tagging_mode", taggingMode)
		err = app.confDB.CreateEntry(memberTable, asKey(vlanName, portName), memberEntry)
		if err != nil {
			return err
		}
	}

	// Update the vlan table with new member list
	log.Infof("SET vlan entry '%s', members=%v", vlanName, membersList)
	vlanEntry.SetList("members", membersList)
	err = app.confDB.ModEntry(vlanTable, asKey(vlanName), vlanEntry)

	return err
}

func (app *nonYangDemoApp) doDeleteVlan() error {
	vlanID, _ := app.path.IntVar("id")
	log.Infof("in doDeleteVlan(); vid=%d", vlanID)

	vlanName := toVlanName(vlanID)
	vlanKey := asKey(vlanName)
	vlanEntry, err := app.confDB.GetEntry(vlanTable, vlanKey)
	if isNotFoundError(err) {
		log.Infof("Vlan %d not found.. nothing to delete", vlanID)
		return nil
	} else if err != nil {
		return err
	}

	// Delete VLAN_MEMBER table entry for each member port
	for _, portName := range vlanEntry.GetList("members") {
		log.Infof("DEL vlan_member entry '%s|%s'", vlanName, portName)
		err = app.confDB.DeleteEntry(memberTable, asKey(vlanName, portName))
		if err != nil {
			return err
		}
	}

	// Delete VLAN table entry
	log.Infof("DEL vlan entry '%s'", vlanName)
	err = app.confDB.DeleteEntry(vlanTable, vlanKey)

	return err
}

func (app *nonYangDemoApp) doDeleteVlanMember() error {
	vlanID, _ := app.path.IntVar("id")
	portName := app.path.Var("port")
	log.Infof("in doDeleteVlanMember(); vid=%d, member=%s", vlanID, portName)

	vlanName := toVlanName(vlanID)
	vlanEntry, err := app.getVlanEntry(vlanID)
	if err != nil {
		return err
	}

	membersList := vlanEntry.GetList("members")
	updatedList := removeElement(membersList, portName)

	// Ignore the request if the port is not a member
	if len(membersList) == len(updatedList) {
		log.Infof("Vlan %d has no member %s", vlanID, portName)
		return nil
	}

	// Update VLAN entry with new member list
	log.Infof("SET vlan entry '%s', members=%v", vlanName, updatedList)
	vlanEntry.SetList("members", updatedList)
	err = app.confDB.SetEntry(vlanTable, asKey(vlanName), vlanEntry)
	if err != nil {
		return err
	}

	// Delete VLAN_MEMBER entry
	log.Infof("DEL vlan_member entry '%s|%s'", vlanName, portName)
	err = app.confDB.DeleteEntry(memberTable, asKey(vlanName, portName))

	return err
}

func (app *nonYangDemoApp) getVlanEntry(vlanID int) (db.Value, error) {
	entry, err := app.confDB.GetEntry(vlanTable, asKey(toVlanName(vlanID)))
	if isNotFoundError(err) {
		err = tlerr.NotFound("VLAN %v does not exists", vlanID)
	}
	return entry, err
}

// toVlanName returns the vlan name for given vlan id.
func toVlanName(vid int) string {
	return fmt.Sprintf("Vlan%d", vid)
}
